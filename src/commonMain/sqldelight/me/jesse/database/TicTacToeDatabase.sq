CREATE TABLE IF NOT EXISTS Users(
    id TEXT PRIMARY KEY,
    username TEXT UNIQUE NOT NULL,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS Games(
    id TEXT PRIMARY KEY,
    player_x_id TEXT NOT NULL,
    player_o_id TEXT NOT NULL,
    player_to_move_id TEXT NOT NULL,
    start_time TEXT NOT NULL,
    end_time TEXT,
    status TEXT NOT NULL, -- 'IN_PROGRESS', 'X_WON', 'O_WON', 'DRAW'

    FOREIGN KEY (player_x_id) REFERENCES Users(id),
    FOREIGN KEY (player_o_id) REFERENCES Users(id),
    FOREIGN KEY (player_to_move_id) REFERENCES Users(id)
);

CREATE TABLE IF NOT EXISTS Moves(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    game_id TEXT NOT NULL,
    square_index INTEGER NOT NULL,
    player_id TEXT NOT NULL, -- We may be able to use this to prevent cheating
    move_symbol TEXT NOT NULL, -- 'X', 'O', 'EMPTY'

    FOREIGN KEY (game_id) REFERENCES Games(id),
    FOREIGN KEY (player_id) REFERENCES Users(id)
);

-- Insert Statements
insertUser:
INSERT INTO Users (id, username, first_name, last_name)
VALUES (?, ?, ?, ?);

insertGame:
INSERT INTO Games (id, player_x_id, player_o_id, player_to_move_id, start_time, status)
VALUES (?, ?, ?, ?, ?, ?);

insertMove:
INSERT INTO Moves (game_id, square_index, player_id, move_symbol)
VALUES (?, ?, ?, ?);

-- Update Statements
updateGameStatus:
UPDATE Games
SET status = ?, end_time = ?, player_to_move_id = ?
WHERE id = ?;

upsertMove {
    UPDATE Moves
    SET square_index = :square_index,
        player_id = :player_id,
        move_symbol = :move_symbol
    WHERE game_id = :game_id AND square_index = :square_index;

    INSERT OR IGNORE INTO Moves (game_id, square_index, player_id, move_symbol)
    VALUES (:game_id, :square_index, :player_id, :move_symbol);
}

-- Select Statements
-- TODO: Add pagination to the queries that have the potential to return many results
selectGamesByPlayerId:
SELECT * FROM Games
WHERE player_x_id = :player_id OR player_o_id = :player_id;

selectGamesByPlayerIdAndStatus:
SELECT * FROM Games
WHERE (player_x_id = :player_id OR player_o_id = :player_id) AND status = ?;

selectUserById:
SELECT * FROM Users
WHERE id = ?;

selectUserByUsername:
SELECT * FROM Users
WHERE username = ?;

selectOpenGamesForUser:
SELECT * FROM Games
WHERE status = 'IN_PROGRESS' AND (
    (player_x_id = :player_id AND player_o_id IS NULL) OR
    (player_o_id = :player_id AND player_x_id IS NULL)
);

selectMovesForGame:
SELECT * FROM Moves
WHERE game_id = ?;

selectGameByPlayerIdsAndGameStatus:
SELECT * FROM Games
WHERE status = :game_status AND
    (player_x_id = :player_one_id OR player_o_id = :player_one_id) AND
    (player_x_id = :player_two_id OR player_o_id = :player_two_id);

selectTopFivePlayers {
SELECT
    u.id,
    u.username,
    u.first_name,
    u.last_name,
    COUNT(g.id) AS total_games,
    SUM(CASE WHEN g.status = 'X_WON' AND g.player_x_id = u.id THEN 1 ELSE 0 END) AS total_x_wins,
    SUM(CASE WHEN g.status = 'O_WON' AND g.player_o_id = u.id THEN 1 ELSE 0 END) AS total_o_wins,
    SUM(CASE WHEN g.status = 'DRAW' THEN 1 ELSE 0 END) AS total_draws
FROM Users u
LEFT JOIN Games g ON g.player_x_id = u.id OR g.player_o_id = u.id
GROUP BY u.id
ORDER BY (total_x_wins + total_o_wins) / total_games DESC
LIMIT 5;
}

selectAllUsers:
SELECT * FROM Users;

selectGameById:
SELECT * FROM Games
WHERE id = ?;
-- NOTE: I could do a lot more in SQL land but I'm going to do it in the application layer for now
